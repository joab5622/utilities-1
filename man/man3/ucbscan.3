.\"     Title: ucbscan
.\"    Author: John McKown
.\"      Date:
.\"    Manual:
.\"    Source:
.\"
.TH "ucbscan" "3" "May, 2012" "z/OS UNIX Utilites from" "John McKown at HealthMarkets"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
ucbscan \- scan on-line DASD UCBs, invoking a user-supplied subroutine for each matching volume serial.
.SH "SYNOPSIS"
\fBucbscan (int *(subroutine)(struc ucb *, struc dce *, struc cmtx *, uint32_t), uint32_t userword, int *argc, int *argvl[], char *argv[]) \fR
.SS Parameters
The first parameter passed is the address of a subroutine or NULL.
.IP
If the first parameter passed to \fBucbscan\fR is not \fINULL\fR ( 4
bytes of x'00'), then it is the address of an LE enabled subroutine.  The
\fBucbscan\fR routine passes a parameter list containing exactly four
fullword entries to it (see below). 
.IP
If the first parameter is NULL, then \fBucbscan\fR will return with a return code of -1 and 
with its entry point address returned in the 32 bit GPR0, also known as the LE MODIFIER field.
I do this because I cannot figure out how to get the address of a subroutine in a DLL. I often need this
in order to pass it to other routines so that they can indirectly call it. I have not found a
way to get this information into other languages using standard methods. In C/C++, it should
be possible by using \fBinline assembler\fR directly after invoking the subroutine.
.PP
The second parameter, \fBuserword\fR, is a 4 byte field which is not used by \fBucbscan\fR, but is simply passed on to the \fBsubroutine\fR
as its fourth parameter. 
.PP
The third parameter, \fBargc\fR, is a pointer to an integer which contains the number of elements in the \fBargvl\fR and \fBargv\fR arrays. 
.PP
The fourth parameter, \fBargvl\fR, is a pointer to an array of integers.
Each element in the \fBargvl\fR array is the length, in bytes, of the corresponding element in the
\fBargv\fR array. This length, unlike the result of the C language subroutine \fBstrlen\fR, includes the trailing NULL (0x00)
character. 
.PP
The fifth parameter, \fBargv\fR, is a pointer to an array of NULL delimited characters. This parameter contains
the volume serial pattern(s) against which the volser of the UCB being tested is compared. This is done
using the undocumented \fBASAWXC\fR macro. This macro does wild card processing with two possible wild 
card characters. An asterisk, \fB *\fR, matches 0 or more characters. A question mark, \fB?\fR, matches
exactly one character.
.PP
.RS 3n
.nf
.SS The subroutine.
\fBint subroutine(struct ucb *, struc dce *, struc cmtx *, uint32_t userword)\fR
.br
The first fullword is the 31-bit address of
the UCB which matched one or more of the patterns. The second is the
address of the DCE for that device. The third is the address of the
UCB extention for that UCB.  The fourth is the value of the second
fullword passed to \fBucbscan\fR.  If the return code from the
subroutine is not zero, then \fBucbscan\fR stops processing with a
return code of 2 and the \fILE MODIFIER\fR field set to the
subroutine's return code.
.IP \(bu 3n
Note that the \fBucbscan\fR subroutine does not really use standard OS linkage. If called from a C/C++
program, it should not be declared a \fIlinkage(,OS)\fR.
.SH "AUTHORS"
.PP
\fBJohn\fR \fBMcKown\fR
.sp -1n
.IP "" 3n
Author.
.PP
.SH "COPYRIGHT"
Copyright \(co 2012, HealthMarkets, Inc.
