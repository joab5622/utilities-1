ucbscan(3)               John McKown at HealthMarkets               ucbscan(3)



NAME
       ucbscan - scan on-line DASD UCBs, invoking a user-supplied subroutine
       for each matching volume serial.

SYNOPSIS
       ucbscan (int *(subroutine)(struc ucb *, struc dce *, struc cmtx *,
       uint32_t), uint32_t userword, int *argc, int *argvl[], char *argv[])

   Parameters
       The first parameter passed is the address of a subroutine or NULL.

              If the first parameter passed to ucbscan is not NULL ( 4 bytes
              of x'00'), then it is the address of an LE enabled subroutine.
              The ucbscan routine passes a parameter list containing exactly
              four fullword entries to it (see below).

              If the first parameter is NULL, then ucbscan will return with a
              return code of -1 and with its entry point address returned in
              the 32 bit GPR0, also known as the LE MODIFIER field.  I do this
              because I cannot figure out how to get the address of a
              subroutine in a DLL. I often need this in order to pass it to
              other routines so that they can indirectly call it. I have not
              found a way to get this information into other languages using
              standard methods. In C/C++, it should be possible by using
              inline assembler directly after invoking the subroutine.

       The second parameter, userword, is a 4 byte field which is not used by
       ucbscan, but is simply passed on to the subroutine as its fourth
       parameter.

       The third parameter, argc, is a pointer to an integer which contains
       the number of elements in the argvl and argv arrays.

       The fourth parameter, argvl, is a pointer to an array of integers.
       Each element in the argvl array is the length, in bytes, of the
       corresponding element in the argv array. This length, unlike the result
       of the C language subroutine strlen, includes the trailing NULL (0x00)
       character.

       The fifth parameter, argv, is a pointer to an array of NULL delimited
       characters. This parameter contains the volume serial pattern(s)
       against which the volser of the UCB being tested is compared. This is
       done using the undocumented ASAWXC macro. This macro does wild card
       processing with two possible wild card characters. An asterisk,  *,
       matches 0 or more characters. A question mark, ?, matches exactly one
       character.

   The subroutine.
       int subroutine(struct ucb *, struc dce *, struc cmtx *, uint32_t
       userword)
       The first fullword is the 31-bit address of the UCB which matched one
       or more of the patterns. The second is the address of the DCE for that
       device. The third is the address of the UCB extention for that UCB.
       The fourth is the value of the second fullword passed to ucbscan.  If
       the return code from the subroutine is not zero, then ucbscan stops
       processing with a return code of 2 and the LE MODIFIER field set to the
       subroutine's return code.

       o  Note that the ucbscan subroutine does not really use standard OS
          linkage. If called from a C/C++ program, it should not be declared a
          linkage(,OS).

AUTHORS
       John McKown
          Author.

COPYRIGHT
       Copyright (C) 2012, HealthMarkets, Inc.



z/OS UNIX Utilites from            May, 2012                        ucbscan(3)
